spring.datasource.url=jdbc:postgresql://${POSTGRES_URI_AWS}:${POSTGRES_PORT_AWS}/${POSTGRES_DB_AWS}
spring.datasource.username=${POSTGRES_USERNAME_AWS}
spring.datasource.password=${POSTGRES_PASSWORD_AWS}

# To initialize DB with data.sql in a non-embedded database
# set spring.datasource.initialization-mode to true.
# It defaults to true for embedded databases like H2.
# This is not recommended for production environments
# We will initialize our database with flyway. So we do
# not need this.
#spring.datasource.initialization-mode=always

# The following line was added to solve some mysterious exception
# Caused by: java.sql.SQLFeatureNotSupportedException: Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.
# This is a harmless but annoying exception. It just causes confusion.
# Hibernate may fix it in the future.
# https://hibernate.atlassian.net/browse/HHH-12368
# Just disable the exception with the following line is what they recommend.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.check_nullability=true

spring.jpa.open-in-view=false

# DDL mode. Defaults to "create-drop" when using an embedded database
# and no schema manager is detected. Otherwise, it defaults to "none".
# This should never be done in production as it will wipe out the database.
# We will initialize our DB with flyway, so we don't need this.
#spring.jpa.hibernate.ddl-auto=create-drop

# Flyway
spring.flyway.locations=classpath:db/common,classpath:db/prod
# Flyway tries to connect to the database at startup.
# Every time flyway runs, it checks the checksums of the migration scripts.
# If any of the migration scripts have been changed, it throws an exception
# with message, "Validate failed: Migration checksum mismatch for migration version ..."
# It keeps track of all this in flyway_schema_history.

# Some scenarios with Flyway...

# (1) If there is no schema in the database (database with empty schema --> brand new):
#     --> if there are no migration scripts
#         --> flyway creates empty table flyway_schema_history.
#     --> if there are migration scripts
#         --> flyway executes them in order.
#         --> table flyway_schema_history is created & populated with version history.
#         --> no baseline version in flyway_schema_history (the last version is baseline)
#         --> any subsequent migrations need to be versioned with greater values than the
#             values in the flyway_schema_history table. If the last version is 1.2, the next
#             migration script to be run should be 1.3.
# (2) If there is already schema in the database
#     (flyway being used for the first time in an already existing schema)
#     --> Flyway sees schema but cannot see flyway_schema_history
#     --> Exception is thrown with message, "Found non-empty schema(s) "public" without schema history table!"
#     --> Setting spring.flyway.baseline-on-migrate=true will solve this problem
spring.flyway.baseline-on-migrate=true
# (3) Flyway gets acquainted with an already existing schema (not created by flyway)
#     --> flyway creates the flyway_schema_history table
#     --> sets baselineVersion to 1 (default)
#     --> baselineVersion can also be overridden with spring.flyway.baseline-version
#     --> any migration script with version > baselineVersion will be executed

# MongoDB
spring.data.mongodb.uri=mongodb+srv://${MONGODB_USERNAME_ATLAS}:${MONGODB_PASSWORD_ATLAS}@${MONGODB_CLUSTER_URI_ATLAS}
